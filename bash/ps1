#!/bin/bash

# Return the mount name and type of given directory (or current).
mount_type() {
  local DIR=${1:-$(pwd -P)}
  pushd / >/dev/null
  python -c '
import os
import re
import subprocess
import sys

p = subprocess.Popen(["mount"], stdout=subprocess.PIPE)
stdout, unused_stderr = p.communicate()

mounts = {}
for line in stdout.split("\n"):
  m = re.match("(.*?) *on *(/.*?) *type *([^ ]*) *(\(.*\))", line)
  if m:
    mounts[m.group(2)] = (m.group(1), m.group(3))

cwd = sys.argv[1] if len(sys.argv) > 1 else os.getcwd()
match = ""
size = 0
for point in mounts:
  if cwd.startswith(point) and len(point) > size:
    match, size = point, len(point)

if match in mounts:
  name, mtype = mounts[match]
  print "%s %s" % (name, mtype)
' "$DIR"
  popd >/dev/null
}

# Prompt
_ps1_git() {
  local BLACK LBLACK RED LRED GREEN LGREEN YELLOW LYELLOW \
    BLUE LBLUE PURPLE LPURPLE CYAN LCYAN NONE \
    STAR NAME BRANCH OTHERS GITOPT
  # Colors (use echo -e to display)
  BLACK='\e[0;30m';  LBLACK='\e[1;30m'; RED='\e[0;31m';    LRED='\e[1;31m';
  GREEN='\e[0;32m';  LGREEN='\e[1;32m'; YELLOW='\e[0;33m'; LYELLOW='\e[1;33m';
  BLUE='\e[0;34m';   LBLUE='\e[1;34m';  PURPLE='\e[0;35m'; LPURPLE='\e[1;35m';
  CYAN='\e[0;36m';   LCYAN='\e[1;36m';  NONE='\e[0m';

  TYPE=$(mount_type)
  read NAME TYPE <<<"$TYPE"
  case "$TYPE" in
    nfs|fuse.sshfs)
      echo -e " ${PURPLE}no-git:$RED$TYPE"
      return ;;
  esac

  while read STAR NAME; do
    if [[ "$STAR" == "*" ]]; then
      BRANCH=$NAME
    else
      OTHERS="$OTHERS $STAR"
    fi
  done < <(git branch 2>/dev/null)
  [[ -z "$BRANCH" ]] && return
  case "$(git --version)" in
    "git version 1.5."*) GITOPT="-u" ;; # -uno not supported in this version
    *) GITOPT="-uno"
  esac
  # branch name stands out if stuff to commit, else normal
  if git status $GITOPT | grep -q "modified:\|new file:"; then
    echo -ne " ${PURPLE}git:$RED$BRANCH"
  else
    echo -ne " ${PURPLE}git:$LPURPLE$BRANCH"
  fi
  # display other local branches after
  echo -e "$PURPLE$OTHERS"
}
_ps1_loadavg() {
  local F1 F2 F3 F4 F5
  if [ -r /proc/loadavg ]; then
    read F1 F2 F3 F4 F5 < /proc/loadavg
    echo "$F1 $F2 $F3"
  fi
}
_ps1() {
  local BLACK LBLACK RED LRED GREEN LGREEN YELLOW LYELLOW \
    BLUE LBLUE PURPLE LPURPLE CYAN LCYAN NONE LOAD DATE P GITOPT
  # Colors (use echo -e to display)
  BLACK='\e[0;30m';  LBLACK='\e[1;30m'; RED='\e[0;31m';    LRED='\e[1;31m';
  GREEN='\e[0;32m';  LGREEN='\e[1;32m'; YELLOW='\e[0;33m'; LYELLOW='\e[1;33m';
  BLUE='\e[0;34m';   LBLUE='\e[1;34m';  PURPLE='\e[0;35m'; LPURPLE='\e[1;35m';
  CYAN='\e[0;36m';   LCYAN='\e[1;36m';  NONE='\e[0m';

  # Enclose non-printing characters with \[ and \]
  # to tell bash they don't take up any space
  RETCODE="\[$CYAN\]\$? "
  LOAD="\[$RED\]\$(_ps1_loadavg) "
  DATE="\[$BLUE\]\D{%Y-%m-%d %H:%M:%S}"

  # No load average for screen since it's already in the bottomline
  [ "$TERM" == "screen" ] && LOAD=""
  P="\[$LRED\]\u\[$LBLUE\]@\[$GREEN\]\h $YELLOW\w"
  P="$P $RETCODE$LOAD$DATE"

  # Show git branch + status
  P="$P\$(_ps1_git)"

  P="$P\[$NONE\]\n\\$ "

  # Only set title for capable terminals
  case "$TERM" in
    xterm*|rxvt*|screen) P="\[\e]0;\u@\h \w\a\]$P";;
    *) P="$P";;
  esac

  echo "$P"
}
PS1=$(_ps1)

# Save bash history after every command
PROMPT_COMMAND="history -a"
