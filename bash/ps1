# Enable programmable completion features if needed and not already enabled
if [ -f /etc/bash_completion ] && [ "x$BASH_COMPLETION" == "x" ]; then
  . /etc/bash_completion
fi

# Prompt
_ps1_git() {
  local BLACK LBLACK RED LRED GREEN LGREEN YELLOW LYELLOW \
    BLUE LBLUE PURPLE LPURPLE CYAN LCYAN NONE BRANCH GITOPT
  # Colors (use echo -e to display)
  BLACK='\e[0;30m';  LBLACK='\e[1;30m'; RED='\e[0;31m';    LRED='\e[1;31m';
  GREEN='\e[0;32m';  LGREEN='\e[1;32m'; YELLOW='\e[0;33m'; LYELLOW='\e[1;33m';
  BLUE='\e[0;34m';   LBLUE='\e[1;34m';  PURPLE='\e[0;35m'; LPURPLE='\e[1;35m';
  CYAN='\e[0;36m';   LCYAN='\e[1;36m';  NONE='\e[0m';
  BRANCH=$(__git_ps1 '%s')
  [ -z "$BRANCH" ] && return
  case "$(git --version)" in
    "git version 1.5."*) GITOPT="-u" ;; # -uno not supported in this version
    *) GITOPT="-uno"
  esac
  # branch name stands out if stuff to commit, else normal
  if git status $GITOPT | grep -q "modified:\|new file:"; then
    echo -ne " ${PURPLE}git:$RED$BRANCH"
  else
    echo -ne " ${PURPLE}git:$LPURPLE$BRANCH"
  fi
  # display other local branches after
  echo -e "$PURPLE"$(git branch | sed '/^\*/d;s/  / /' | tr -d '\n')
}
_ps1_loadavg() {
  local F1 F2 F3 F4 F5
  if [ -r /proc/loadavg ]; then
    read F1 F2 F3 F4 F5 < /proc/loadavg
    echo "$F1 $F2 $F3"
  fi
}
_ps1() {
  local BLACK LBLACK RED LRED GREEN LGREEN YELLOW LYELLOW \
    BLUE LBLUE PURPLE LPURPLE CYAN LCYAN NONE LOAD DATE P GITOPT
  # Colors (use echo -e to display)
  BLACK='\e[0;30m';  LBLACK='\e[1;30m'; RED='\e[0;31m';    LRED='\e[1;31m';
  GREEN='\e[0;32m';  LGREEN='\e[1;32m'; YELLOW='\e[0;33m'; LYELLOW='\e[1;33m';
  BLUE='\e[0;34m';   LBLUE='\e[1;34m';  PURPLE='\e[0;35m'; LPURPLE='\e[1;35m';
  CYAN='\e[0;36m';   LCYAN='\e[1;36m';  NONE='\e[0m';

  # Enclose non-printing characters with \[ and \]
  # to tell bash they don't take up any space
  RETCODE="\[$CYAN\]\$? "
  LOAD="\[$RED\]\$(_ps1_loadavg) "
  DATE="\[$BLUE\]\D{%Y-%m-%d %H:%M:%S}"

  # No load average for screen since it's already in the bottomline
  [ "$TERM" == "screen" ] && LOAD=""
  P="\[$LRED\]\u\[$LBLUE\]@\[$GREEN\]\h $YELLOW\w"
  P="$P $RETCODE$LOAD$DATE"

  # Show git branch + status
  if command -v __git_ps1 >/dev/null; then
    P="$P\$(_ps1_git)"
  fi

  P="$P\[$NONE\]\n\\$ "

  # Only set title for capable terminals
  case "$TERM" in
    xterm*|rxvt*|screen) P="\[\e]0;\u@\h \w\a\]$P";;
    *) P="$P";;
  esac

  echo "$P"
}
PS1=$(_ps1)


# - Add the following code to disable git when in an NFS directory

# Is the current directory on NFS? look for .snapshot in parent tree.
# Usage: if on_nfs; then ...; else ...; fi
on_nfs() {
  local ON_NFS=1
  pushd "$(pwd -P)" >/dev/null
  while :; do
    [[ -d .snapshot ]] && ON_NFS=0 && break
    [[ "$PWD" = "/" ]] && break
    cd ..
  done
  popd >/dev/null
  return $ON_NFS
}

# Rename _ps1_git to add hook to check for nfs
eval "$(echo '_ps1_git_orig()'; declare -f _ps1_git | tail -n +2)"
_ps1_git() {
  local RED PURPLE
  RED='\e[0;31m'; PURPLE='\e[0;35m';
  if on_nfs; then
    echo -e " ${PURPLE}no-git:${RED}nfs"
  else
    _ps1_git_orig
  fi
}
